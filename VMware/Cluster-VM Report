<# 
Recover VMtools Version and update
VM Hardware Version
VM HD Space Used **Not done yet**
VMX Nic in Use
VMs with snapshots.

Textbox Input #>

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

$form = New-Object System.Windows.Forms.Form
$form.Text = 'Data Entry Form'
$form.Size = New-Object System.Drawing.Size(300,200)
$form.StartPosition = 'CenterScreen'

$okButton = New-Object System.Windows.Forms.Button
$okButton.Location = New-Object System.Drawing.Point(75,120)
$okButton.Size = New-Object System.Drawing.Size(75,23)
$okButton.Text = 'OK'
$okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
$form.AcceptButton = $okButton
$form.Controls.Add($okButton)

$cancelButton = New-Object System.Windows.Forms.Button
$cancelButton.Location = New-Object System.Drawing.Point(150,120)
$cancelButton.Size = New-Object System.Drawing.Size(75,23)
$cancelButton.Text = 'Cancel'
$cancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
$form.CancelButton = $cancelButton
$form.Controls.Add($cancelButton)

$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Point(10,20)
$label.Size = New-Object System.Drawing.Size(280,20)
$label.Text = 'Please enter the Cluster Name in the space bellow:'
$form.Controls.Add($label)

$textBox = New-Object System.Windows.Forms.TextBox
$textBox.Location = New-Object System.Drawing.Point(10,40)
$textBox.Size = New-Object System.Drawing.Size(260,20)
$form.Controls.Add($textBox)

$form.Topmost = $true

$form.Add_Shown({$textBox.Select()})
$result = $form.ShowDialog()

if ($result -eq [System.Windows.Forms.DialogResult]::OK)
{
    $clustername = $textBox.Text
    #$clustername
}

#Connect-VIServer

#Create Folder and set location.
$folderpath = [Environment]::GetFolderPath("MyDocuments")

$folderpath
$fp = $folderpath + '\' + $clustername + '_Report'
# c:
New-Item -ItemType Directory -Force $fp
cd $fp

#$clustername

get-cluster $clustername |get-vm |Get-Snapshot |select VM, Name, Description,Created,SizeGB, PowerState |Export-Csv $clustername-SnapShot.csv

get-cluster $clustername |get-vm |Get-NetworkAdapter|select Parent, Name, Type, NetworkName,MacAddress |Export-Csv $clustername-Network.csv

#Tools Config Option 1 -not fully functional.
#get-cluster $clustername |get-vm | Select Name, HardwareVersion, @{N='Vmware Tools Status';E={$_.Guest.ToolsStatus}}, @{N='VMware Tools Version';E={$_.Config.Tools.ToolsVersion}}

#Tools Config Option 2
New-VIProperty -Name ToolsVersionStatus -ObjectType VirtualMachine -ValueFromExtensionProperty 'Guest.ToolsVersionStatus'
New-VIProperty -Name ToolsVersion -ObjectType VirtualMachine -ValueFromExtensionProperty 'Config.tools.ToolsVersion'
get-cluster $clustername |Get-VM |select Name, HardwareVersion, @{N='Tools';E={$_.guest.ToolsVersion}},ToolsVersion, ToolsVersionStatus |Export-Csv $clustername-ToolsHWInfo.csv

<#
#Combines the output csv files into an xls file.
# **This will bw replaced by $fp** $root = "C:\Users\abc\Desktop\testcsv"
$CSVfiles = Get-ChildItem -Path $fp -Filter *.csv

$xlsx = $fp + '\' + $clustername + '_Report.xlsx' #output location
#$xlsx = "C:\Users\abc\Desktop\testxl.xlsx" #output location from orgional scropt
$delimiter = "," #delimiter

#Create a excel
$xl=New-Object -ComObject Excel.Application
$xl.Visible=$true
#add a workbook
$wb=$xl.WorkBooks.add(1)

ForEach ($csv in $CSVfiles){

    #name  the worksheet
    $ws=$wb.WorkSheets.item(1)
    $ws.Name = [io.path]::GetFileNameWithoutExtension($csv)

    $TxtConnector = ("TEXT;" + $csv)
    $Connector = $ws.QueryTables.add($TxtConnector,$ws.Range("A1"))
    $query = $ws.QueryTables.item($Connector.name)
    $query.TextFileOtherDelimiter = $delimiter
    $query.TextFileParseType  = 1
    $query.TextFileColumnDataTypes = ,1 * $ws.Cells.Columns.Count
    $query.AdjustColumnWidth = 1

    # Execute & delete the import query
    $query.Refresh()
    $query.Delete()
    $wb.SaveAs($xlsx,51)
}
# Save & close the Workbook as XLSX.
$xl.Quit()

#>


# $path="c:\path\to\folder" #target folder
# cd $path;
cd $fp

$csvs = Get-ChildItem .\* -Include *.csv
$y=$csvs.Count
Write-Host "Detected the following CSV files: ($y)"
foreach ($csv in $csvs)
{
Write-Host " "$csv.Name
}
#$outputfilename = $(get-date -f yyyyMMdd) + "_" + $env:USERNAME + "_combined-data.xlsx" #creates file name with date/username
$outputfilename = $(get-date -f yyyyMMdd) + "_" + $clustername + "_Report.xlsx" #creates file name with date/clustername
#$outf = $fp + '\' + $outputfilename
Write-Host Creating: $outputfilename
$excelapp = new-object -comobject Excel.Application
$excelapp.sheetsInNewWorkbook = $csvs.Count
$xlsx = $excelapp.Workbooks.Add()
$sheet=1

foreach ($csv in $csvs)
{
$row=1
$column=1
$worksheet = $xlsx.Worksheets.Item($sheet)
$worksheet.Name = $csv.Name
$file = (Get-Content $csv)
foreach($line in $file)
{
$linecontents=$line -split ',(?!\s*\w+")'
foreach($cell in $linecontents)
{
$worksheet.Cells.Item($row,$column) = $cell
$column++
}
$column=1
$row++
}
$sheet++
}
$output = $fp + "\" + $outputfilename
$xlsx.SaveAs($output)
$excelapp.quit()
#cd \ #returns to drive root

